#!/bin/bash
set -e # exit on first error
set -u # exit on using unset variable

echo 'bulk-deployment-rollout-restart is a script to restart'
echo 'deployments (wildcard) inside of namespaces (wildcard).'
echo ''
echo 'Will run:'
echo '  kubectl -n [namespace] rollout restart deployment [deployment]'
echo ''
echo 'config env files must be placed in "/etc/townsuite/k8s/env-configs/"'
echo 'sudo mkdir -p /etc/townsuite/k8s/env-configs/'
echo ''
echo 'Requirements:'
echo 'kubectl'
echo '    Download from https://kubernetes.io/docs/tasks/tools/'
echo 'cut'
echo 'grep'
echo 'xargs'

# source will execute the env file.  Be sure you trust the file.

function rollout_restart_deployments(){
    NAMESPACE=$1
    DEPLOYMENT_NAME=$2
  
    $k -n $NAMESPACE rollout restart deployment $DEPLOYMENT_NAME
}


source_envs=`ls -d /etc/townsuite/k8s/env-configs/bulk-deploy*namespacewildcard*.env | xargs -n1 echo`

for source_env in ${source_envs[*]}
do
    source $source_env

    found_namespaces=`$k get namespaces -o name | grep "$namespace_wildcard"  | cut -d "/" -f 2 | xargs -n1 echo`

    for namespacey in ${found_namespaces[*]}
    do
        for item in ${deployments_wildcards[*]}
        do
            # specfic paths for each site
            deploy_name_wildcard=`echo $item | cut -d "," -f 1`

            deployment_names=`$k -n $namespacey get deployments -o name | grep "$deploy_name_wildcard" | cut -d "/" -f 2 | xargs -n1 echo`

            for dep_name in ${deployment_names}
            do
                rollout_restart_deployments "$namespacey" "$dep_name"
            done
        done
    done
done
