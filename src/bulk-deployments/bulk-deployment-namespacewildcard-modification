#!/bin/bash
set -e # exit on first error
set -u # exit on using unset variable

echo 'bulk-deployment-namespacewildcard-modification is a script to bulk patch'
echo 'deployments (wildcard) inside of namespaces (wildcard).'
echo ''
echo 'Will set:'
echo '  rollingUpdate strategy maxUnavailable=25%'
echo '  startupProbe'
echo '  livenessProbe'
echo '  readynessProbe'
echo '  image name/version'
echo '  memory and cpu resource request'
echo '  securityContext allowPrivilegeEscalation=false'
echo ''
echo 'config env files must be placed in "/etc/townsuite/k8s/env-configs/"'
echo 'sudo mkdir -p /etc/townsuite/k8s/env-configs/'
echo ''
echo 'Requirements:'
echo 'kubectl'
echo '    Download from https://kubernetes.io/docs/tasks/tools/'
echo 'cut'
echo 'grep'
echo 'xargs'

# source will execute the env file.  Be sure you trust the file.

function upgrade_deployments(){
    NAMESPACE=$1
    DEPLOYMENT_NAME=$2
    IMAGE_NAME=$3
    PORT=$4
    CPU=$5
    RAM=$6
    STARTUPPROBE=$7
    LIVEPROBE=$8
    READYPROBE=$9
    SCHEME=${10}
    
    echo "patching $NAMESPACE::$DEPLOYMENT_NAME::$IMAGE_NAME::$PORT::$CPU::$RAM::$STARTUPPROBE::$LIVEPROBE::$READYPROBE::$SCHEME"

    # set rollingUpdate strategy
    $k -n $NAMESPACE patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"strategy\":{\"rollingUpdate\":{\"maxSurge\": 0, \"maxUnavailable\": \"25%\"}, \"type\": \"RollingUpdate\"}}}"
    
    if (( $PORT > 0 )); then
        # set startupProbe
        $k -n $NAMESPACE patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$DEPLOYMENT_NAME\",\"startupProbe\":{\"httpGet\": {\"path\":\"$STARTUPPROBE\", \"port\": $PORT, \"scheme\": \"$SCHEME\"}, \"failureThreshold\": 30, \"periodSeconds\": 10}}]}}}}"

        # set livenessProbe
        $k -n $NAMESPACE patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$DEPLOYMENT_NAME\",\"livenessProbe\":{\"httpGet\": {\"path\":\"$LIVEPROBE\", \"port\": $PORT, \"scheme\": \"$SCHEME\"}, \"initialDelaySeconds\": 30, \"failureThreshold\": 3, \"timeoutSeconds\": 5}}]}}}}"

        # set readinessProbe
        $k -n $NAMESPACE patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$DEPLOYMENT_NAME\",\"readinessProbe\":{\"httpGet\": {\"path\":\"$READYPROBE\", \"port\": $PORT, \"scheme\": \"$SCHEME\"}, \"initialDelaySeconds\": 30, \"failureThreshold\": 30, \"timeoutSeconds\": 15}}]}}}}"
        
    fi

    # set image name
    $k -n $NAMESPACE patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$DEPLOYMENT_NAME\",\"image\":\"$IMAGE_NAME\"}]}}}}"

    # set memory and cpu request
    $k -n $NAMESPACE patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$DEPLOYMENT_NAME\",\"resources\":{\"requests\": {\"memory\":\"$RAM\", \"cpu\": \"$CPU\"}}}]}}}}"

    # set allowPrivilegeEscalation to false
    $k -n $NAMESPACE get deployment $DEPLOYMENT_NAME -o json | jq '.spec.template.spec.containers[].securityContext.allowPrivilegeEscalation = false' | $k -n $NAMESPACE patch deployment $DEPLOYMENT_NAME -p "$(cat -)"

}


source_envs=`ls -d /etc/townsuite/k8s/env-configs/bulk-deploy*namespacewildcard*.env | xargs -n1 echo`

for source_env in ${source_envs[*]}
do
    source $source_env

    if [ $ALREADY_UPDATED -eq 1 ]; then
        echo "already updated, moving to next config"
        continue
    fi

    found_namespaces=`$k get namespaces -o name | grep "$namespace_wildcard"  | cut -d "/" -f 2 | xargs -n1 echo`

    for namespacey in ${found_namespaces[*]}
    do
        for item in ${deployments_wildcards[*]}
        do
            # specfic paths for each site
            deploy_name_wildcard=`echo $item | cut -d "," -f 1`
            img_name=`echo $item | cut -d "," -f 2`
            port=`echo $item | cut -d "," -f 3`
            cpu=`echo $item | cut -d "," -f 4`
            ram=`echo $item | cut -d "," -f 5`
            startupProbe=`echo $item | cut -d "," -f 6`
            liveProbe=`echo $item | cut -d "," -f 7`
            readyProbe=`echo $item | cut -d "," -f 8`
            scheme=`echo $item | cut -d "," -f 9`

            deployment_names=`$k -n $namespacey get deployments -o name | grep "$deploy_name_wildcard" | cut -d "/" -f 2 | xargs -n1 echo`

            for dep_name in ${deployment_names}
            do
                upgrade_deployments "$namespacey" "$dep_name" "$img_name" "$port" "$cpu" "$ram" "$startupProbe" "$liveProbe" "$readyProbe" "$scheme"
            done
        done
    done
done
